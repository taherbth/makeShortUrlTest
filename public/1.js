(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[1],{

/***/ "./resources/js/components/manage/assets/js/tagsinput.js":
/*!***************************************************************!*\
  !*** ./resources/js/components/manage/assets/js/tagsinput.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n/*\n * bootstrap-tagsinput v0.8.0\n * \n */\n(function ($) {\n  \"use strict\";\n\n  var defaultOptions = {\n    tagClass: function tagClass(item) {\n      return 'badge badge-info';\n    },\n    focusClass: 'focus',\n    itemValue: function itemValue(item) {\n      return item ? item.toString() : item;\n    },\n    itemText: function itemText(item) {\n      return this.itemValue(item);\n    },\n    itemTitle: function itemTitle(item) {\n      return null;\n    },\n    freeInput: true,\n    addOnBlur: true,\n    maxTags: undefined,\n    maxChars: undefined,\n    confirmKeys: [13, 44],\n    delimiter: ',',\n    delimiterRegex: null,\n    cancelConfirmKeysOnEmpty: false,\n    onTagExists: function onTagExists(item, $tag) {\n      $tag.hide().fadeIn();\n    },\n    trimValue: false,\n    allowDuplicates: false,\n    triggerChange: true,\n    editOnBackspace: false\n  };\n  /**\n   * Constructor function\n   */\n\n  function TagsInput(element, options) {\n    this.isInit = true;\n    this.itemsArray = [];\n    this.$element = $(element);\n    this.$element.addClass('sr-only');\n    this.isSelect = element.tagName === 'SELECT';\n    this.multiple = this.isSelect && element.hasAttribute('multiple');\n    this.objectItems = options && options.itemValue;\n    this.placeholderText = element.hasAttribute('placeholder') ? this.$element.attr('placeholder') : '';\n    this.name = element.hasAttribute('name') ? this.$element.attr('name') : '';\n    this.type = element.hasAttribute('type') ? this.$element.attr('type') : 'text';\n    this.inputSize = Math.max(1, this.placeholderText.length);\n    this.$container = $('<div class=\"bootstrap-tagsinput\"></div>');\n    this.$input = $('<input type=\"' + this.type + '\" name=\"' + this.name + '\" placeholder=\"' + this.placeholderText + '\"/>').appendTo(this.$container);\n    this.$element.before(this.$container);\n    this.build(options);\n    this.isInit = false;\n  }\n\n  TagsInput.prototype = {\n    constructor: TagsInput,\n\n    /**\n     * Adds the given item as a new tag. Pass true to dontPushVal to prevent\n     * updating the elements val()\n     */\n    add: function add(item, dontPushVal, options) {\n      var self = this;\n      if (self.options.maxTags && self.itemsArray.length >= self.options.maxTags) return; // Ignore falsey values, except false\n\n      if (item !== false && !item) return; // Trim value\n\n      if (typeof item === \"string\" && self.options.trimValue) {\n        item = $.trim(item);\n      } // Throw an error when trying to add an object while the itemValue option was not set\n\n\n      if (_typeof(item) === \"object\" && !self.objectItems) throw \"Can't add objects when itemValue option is not set\"; // Ignore strings only containg whitespace\n\n      if (item.toString().match(/^\\s*$/)) return; // If SELECT but not multiple, remove current tag\n\n      if (self.isSelect && !self.multiple && self.itemsArray.length > 0) self.remove(self.itemsArray[0]);\n\n      if (typeof item === \"string\" && this.$element[0].tagName === 'INPUT') {\n        var delimiter = self.options.delimiterRegex ? self.options.delimiterRegex : self.options.delimiter;\n        var items = item.split(delimiter);\n\n        if (items.length > 1) {\n          for (var i = 0; i < items.length; i++) {\n            this.add(items[i], true);\n          }\n\n          if (!dontPushVal) self.pushVal(self.options.triggerChange);\n          return;\n        }\n      }\n\n      var itemValue = self.options.itemValue(item),\n          itemText = self.options.itemText(item),\n          tagClass = self.options.tagClass(item),\n          itemTitle = self.options.itemTitle(item); // Ignore items allready added\n\n      var existing = $.grep(self.itemsArray, function (item) {\n        return self.options.itemValue(item) === itemValue;\n      })[0];\n\n      if (existing && !self.options.allowDuplicates) {\n        // Invoke onTagExists\n        if (self.options.onTagExists) {\n          var $existingTag = $(\".badge\", self.$container).filter(function () {\n            return $(this).data(\"item\") === existing;\n          });\n          self.options.onTagExists(item, $existingTag);\n        }\n\n        return;\n      } // if length greater than limit\n\n\n      if (self.items().toString().length + item.length + 1 > self.options.maxInputLength) return; // raise beforeItemAdd arg\n\n      var beforeItemAddEvent = $.Event('beforeItemAdd', {\n        item: item,\n        cancel: false,\n        options: options\n      });\n      self.$element.trigger(beforeItemAddEvent);\n      if (beforeItemAddEvent.cancel) return; // register item in internal array and map\n\n      self.itemsArray.push(item); // add a tag element\n\n      var $tag = $('<span class=\"' + htmlEncode(tagClass) + (itemTitle !== null ? '\" title=\"' + itemTitle : '') + '\">' + htmlEncode(itemText) + '<span data-role=\"remove\"></span></span>');\n      $tag.data('item', item);\n      self.findInputWrapper().before($tag); // Check to see if the tag exists in its raw or uri-encoded form\n\n      var optionExists = $('option[value=\"' + encodeURIComponent(itemValue).replace(/\"/g, '\\\\\"') + '\"]', self.$element).length || $('option[value=\"' + htmlEncode(itemValue).replace(/\"/g, '\\\\\"') + '\"]', self.$element).length; // add <option /> if item represents a value not present in one of the <select />'s options\n\n      if (self.isSelect && !optionExists) {\n        var $option = $('<option selected>' + htmlEncode(itemText) + '</option>');\n        $option.data('item', item);\n        $option.attr('value', itemValue);\n        self.$element.append($option);\n      }\n\n      if (!dontPushVal) self.pushVal(self.options.triggerChange); // Add class when reached maxTags\n\n      if (self.options.maxTags === self.itemsArray.length || self.items().toString().length === self.options.maxInputLength) self.$container.addClass('bootstrap-tagsinput-max'); // If using typeahead, once the tag has been added, clear the typeahead value so it does not stick around in the input.\n\n      if ($('.typeahead, .twitter-typeahead', self.$container).length) {\n        self.$input.typeahead('val', '');\n      }\n\n      if (this.isInit) {\n        self.$element.trigger($.Event('itemAddedOnInit', {\n          item: item,\n          options: options\n        }));\n      } else {\n        self.$element.trigger($.Event('itemAdded', {\n          item: item,\n          options: options\n        }));\n      }\n    },\n\n    /**\n     * Removes the given item. Pass true to dontPushVal to prevent updating the\n     * elements val()\n     */\n    remove: function remove(item, dontPushVal, options) {\n      var self = this;\n\n      if (self.objectItems) {\n        if (_typeof(item) === \"object\") item = $.grep(self.itemsArray, function (other) {\n          return self.options.itemValue(other) == self.options.itemValue(item);\n        });else item = $.grep(self.itemsArray, function (other) {\n          return self.options.itemValue(other) == item;\n        });\n        item = item[item.length - 1];\n      }\n\n      if (item) {\n        var beforeItemRemoveEvent = $.Event('beforeItemRemove', {\n          item: item,\n          cancel: false,\n          options: options\n        });\n        self.$element.trigger(beforeItemRemoveEvent);\n        if (beforeItemRemoveEvent.cancel) return;\n        $('.badge', self.$container).filter(function () {\n          return $(this).data('item') === item;\n        }).remove();\n        $('option', self.$element).filter(function () {\n          return $(this).data('item') === item;\n        }).remove();\n        if ($.inArray(item, self.itemsArray) !== -1) self.itemsArray.splice($.inArray(item, self.itemsArray), 1);\n      }\n\n      if (!dontPushVal) self.pushVal(self.options.triggerChange); // Remove class when reached maxTags\n\n      if (self.options.maxTags > self.itemsArray.length) self.$container.removeClass('bootstrap-tagsinput-max');\n      self.$element.trigger($.Event('itemRemoved', {\n        item: item,\n        options: options\n      }));\n    },\n\n    /**\n     * Removes all items\n     */\n    removeAll: function removeAll() {\n      var self = this;\n      $('.badge', self.$container).remove();\n      $('option', self.$element).remove();\n\n      while (self.itemsArray.length > 0) {\n        self.itemsArray.pop();\n      }\n\n      self.pushVal(self.options.triggerChange);\n    },\n\n    /**\n     * Refreshes the tags so they match the text/value of their corresponding\n     * item.\n     */\n    refresh: function refresh() {\n      var self = this;\n      $('.badge', self.$container).each(function () {\n        var $tag = $(this),\n            item = $tag.data('item'),\n            itemValue = self.options.itemValue(item),\n            itemText = self.options.itemText(item),\n            tagClass = self.options.tagClass(item); // Update tag's class and inner text\n\n        $tag.attr('class', null);\n        $tag.addClass('badge ' + htmlEncode(tagClass));\n        $tag.contents().filter(function () {\n          return this.nodeType == 3;\n        })[0].nodeValue = htmlEncode(itemText);\n\n        if (self.isSelect) {\n          var option = $('option', self.$element).filter(function () {\n            return $(this).data('item') === item;\n          });\n          option.attr('value', itemValue);\n        }\n      });\n    },\n\n    /**\n     * Returns the items added as tags\n     */\n    items: function items() {\n      return this.itemsArray;\n    },\n\n    /**\n     * Assembly value by retrieving the value of each item, and set it on the\n     * element.\n     */\n    pushVal: function pushVal() {\n      var self = this,\n          val = $.map(self.items(), function (item) {\n        return self.options.itemValue(item).toString();\n      });\n      self.$element.val(val.join(self.options.delimiter));\n      if (self.options.triggerChange) self.$element.trigger('change');\n    },\n\n    /**\n     * Initializes the tags input behaviour on the element\n     */\n    build: function build(options) {\n      var self = this;\n      self.options = $.extend({}, defaultOptions, options); // When itemValue is set, freeInput should always be false\n\n      if (self.objectItems) self.options.freeInput = false;\n      makeOptionItemFunction(self.options, 'itemValue');\n      makeOptionItemFunction(self.options, 'itemText');\n      makeOptionFunction(self.options, 'tagClass'); // Typeahead Bootstrap version 2.3.2\n\n      if (self.options.typeahead) {\n        var typeahead = self.options.typeahead || {};\n        makeOptionFunction(typeahead, 'source');\n        self.$input.typeahead($.extend({}, typeahead, {\n          source: function source(query, process) {\n            function processItems(items) {\n              var texts = [];\n\n              for (var i = 0; i < items.length; i++) {\n                var text = self.options.itemText(items[i]);\n                map[text] = items[i];\n                texts.push(text);\n              }\n\n              process(texts);\n            }\n\n            this.map = {};\n            var map = this.map,\n                data = typeahead.source(query);\n\n            if ($.isFunction(data.success)) {\n              // support for Angular callbacks\n              data.success(processItems);\n            } else if ($.isFunction(data.then)) {\n              // support for Angular promises\n              data.then(processItems);\n            } else {\n              // support for functions and jquery promises\n              $.when(data).then(processItems);\n            }\n          },\n          updater: function updater(text) {\n            self.add(this.map[text]);\n            return this.map[text];\n          },\n          matcher: function matcher(text) {\n            return text.toLowerCase().indexOf(this.query.trim().toLowerCase()) !== -1;\n          },\n          sorter: function sorter(texts) {\n            return texts.sort();\n          },\n          highlighter: function highlighter(text) {\n            var regex = new RegExp('(' + this.query + ')', 'gi');\n            return text.replace(regex, \"<strong>$1</strong>\");\n          }\n        }));\n      } // typeahead.js\n\n\n      if (self.options.typeaheadjs) {\n        // Determine if main configurations were passed or simply a dataset\n        var typeaheadjs = self.options.typeaheadjs;\n\n        if (!$.isArray(typeaheadjs)) {\n          typeaheadjs = [null, typeaheadjs];\n        }\n\n        $.fn.typeahead.apply(self.$input, typeaheadjs).on('typeahead:selected', $.proxy(function (obj, datum, name) {\n          var index = 0;\n          typeaheadjs.some(function (dataset, _index) {\n            if (dataset.name === name) {\n              index = _index;\n              return true;\n            }\n\n            return false;\n          }); // @TODO Dep: https://github.com/corejavascript/typeahead.js/issues/89\n\n          if (typeaheadjs[index].valueKey) {\n            self.add(datum[typeaheadjs[index].valueKey]);\n          } else {\n            self.add(datum);\n          }\n\n          self.$input.typeahead('val', '');\n        }, self));\n      }\n\n      self.$container.on('click', $.proxy(function (event) {\n        if (!self.$element.attr('disabled')) {\n          self.$input.removeAttr('disabled');\n        }\n\n        self.$input.focus();\n      }, self));\n\n      if (self.options.addOnBlur && self.options.freeInput) {\n        self.$input.on('focusout', $.proxy(function (event) {\n          // HACK: only process on focusout when no typeahead opened, to\n          //       avoid adding the typeahead text as tag\n          if ($('.typeahead, .twitter-typeahead', self.$container).length === 0) {\n            self.add(self.$input.val());\n            self.$input.val('');\n          }\n        }, self));\n      } // Toggle the 'focus' css class on the container when it has focus\n\n\n      self.$container.on({\n        focusin: function focusin() {\n          self.$container.addClass(self.options.focusClass);\n        },\n        focusout: function focusout() {\n          self.$container.removeClass(self.options.focusClass);\n        }\n      });\n      self.$container.on('keydown', 'input', $.proxy(function (event) {\n        var $input = $(event.target),\n            $inputWrapper = self.findInputWrapper();\n\n        if (self.$element.attr('disabled')) {\n          self.$input.attr('disabled', 'disabled');\n          return;\n        }\n\n        switch (event.which) {\n          // BACKSPACE\n          case 8:\n            if (doGetCaretPosition($input[0]) === 0) {\n              var prev = $inputWrapper.prev();\n\n              if (prev.length) {\n                if (self.options.editOnBackspace === true) {\n                  $input.val(prev.data('item'));\n                }\n\n                self.remove(prev.data('item'));\n              }\n            }\n\n            break;\n          // DELETE\n\n          case 46:\n            if (doGetCaretPosition($input[0]) === 0) {\n              var next = $inputWrapper.next();\n\n              if (next.length) {\n                self.remove(next.data('item'));\n              }\n            }\n\n            break;\n          // LEFT ARROW\n\n          case 37:\n            // Try to move the input before the previous tag\n            var $prevTag = $inputWrapper.prev();\n\n            if ($input.val().length === 0 && $prevTag[0]) {\n              $prevTag.before($inputWrapper);\n              $input.focus();\n            }\n\n            break;\n          // RIGHT ARROW\n\n          case 39:\n            // Try to move the input after the next tag\n            var $nextTag = $inputWrapper.next();\n\n            if ($input.val().length === 0 && $nextTag[0]) {\n              $nextTag.after($inputWrapper);\n              $input.focus();\n            }\n\n            break;\n\n          default: // ignore\n\n        } // Reset internal input's size\n\n\n        var textLength = $input.val().length,\n            wordSpace = Math.ceil(textLength / 5),\n            size = textLength + wordSpace + 1;\n        $input.attr('size', Math.max(this.inputSize, size));\n      }, self));\n      self.$container.on('keypress', 'input', $.proxy(function (event) {\n        var $input = $(event.target);\n\n        if (self.$element.attr('disabled')) {\n          self.$input.attr('disabled', 'disabled');\n          return;\n        }\n\n        var text = $input.val(),\n            maxLengthReached = self.options.maxChars && text.length >= self.options.maxChars;\n\n        if (self.options.freeInput && (keyCombinationInList(event, self.options.confirmKeys) || maxLengthReached)) {\n          // Only attempt to add a tag if there is data in the field\n          if (text.length !== 0) {\n            self.add(maxLengthReached ? text.substr(0, self.options.maxChars) : text);\n            $input.val('');\n          } // If the field is empty, let the event triggered fire as usual\n\n\n          if (self.options.cancelConfirmKeysOnEmpty === false) {\n            event.preventDefault();\n          }\n        } // Reset internal input's size\n\n\n        var textLength = $input.val().length,\n            wordSpace = Math.ceil(textLength / 5),\n            size = textLength + wordSpace + 1;\n        $input.attr('size', Math.max(this.inputSize, size));\n      }, self)); // Remove icon clicked\n\n      self.$container.on('click', '[data-role=remove]', $.proxy(function (event) {\n        if (self.$element.attr('disabled')) {\n          return;\n        }\n\n        self.remove($(event.target).closest('.badge').data('item'));\n      }, self)); // Only add existing value as tags when using strings as tags\n\n      if (self.options.itemValue === defaultOptions.itemValue) {\n        if (self.$element[0].tagName === 'INPUT') {\n          self.add(self.$element.val());\n        } else {\n          $('option', self.$element).each(function () {\n            self.add($(this).attr('value'), true);\n          });\n        }\n      }\n    },\n\n    /**\n     * Removes all tagsinput behaviour and unregsiter all event handlers\n     */\n    destroy: function destroy() {\n      var self = this; // Unbind events\n\n      self.$container.off('keypress', 'input');\n      self.$container.off('click', '[role=remove]');\n      self.$container.remove();\n      self.$element.removeData('tagsinput');\n      self.$element.show();\n    },\n\n    /**\n     * Sets focus on the tagsinput\n     */\n    focus: function focus() {\n      this.$input.focus();\n    },\n\n    /**\n     * Returns the internal input element\n     */\n    input: function input() {\n      return this.$input;\n    },\n\n    /**\n     * Returns the element which is wrapped around the internal input. This\n     * is normally the $container, but typeahead.js moves the $input element.\n     */\n    findInputWrapper: function findInputWrapper() {\n      var elt = this.$input[0],\n          container = this.$container[0];\n\n      while (elt && elt.parentNode !== container) {\n        elt = elt.parentNode;\n      }\n\n      return $(elt);\n    }\n  };\n  /**\n   * Register JQuery plugin\n   */\n\n  $.fn.tagsinput = function (arg1, arg2, arg3) {\n    var results = [];\n    this.each(function () {\n      var tagsinput = $(this).data('tagsinput'); // Initialize a new tags input\n\n      if (!tagsinput) {\n        tagsinput = new TagsInput(this, arg1);\n        $(this).data('tagsinput', tagsinput);\n        results.push(tagsinput);\n\n        if (this.tagName === 'SELECT') {\n          $('option', $(this)).attr('selected', 'selected');\n        } // Init tags from $(this).val()\n\n\n        $(this).val($(this).val());\n      } else if (!arg1 && !arg2) {\n        // tagsinput already exists\n        // no function, trying to init\n        results.push(tagsinput);\n      } else if (tagsinput[arg1] !== undefined) {\n        // Invoke function on existing tags input\n        if (tagsinput[arg1].length === 3 && arg3 !== undefined) {\n          var retVal = tagsinput[arg1](arg2, null, arg3);\n        } else {\n          var retVal = tagsinput[arg1](arg2);\n        }\n\n        if (retVal !== undefined) results.push(retVal);\n      }\n    });\n\n    if (typeof arg1 == 'string') {\n      // Return the results from the invoked function calls\n      return results.length > 1 ? results : results[0];\n    } else {\n      return results;\n    }\n  };\n\n  $.fn.tagsinput.Constructor = TagsInput;\n  /**\n   * Most options support both a string or number as well as a function as\n   * option value. This function makes sure that the option with the given\n   * key in the given options is wrapped in a function\n   */\n\n  function makeOptionItemFunction(options, key) {\n    if (typeof options[key] !== 'function') {\n      var propertyName = options[key];\n\n      options[key] = function (item) {\n        return item[propertyName];\n      };\n    }\n  }\n\n  function makeOptionFunction(options, key) {\n    if (typeof options[key] !== 'function') {\n      var value = options[key];\n\n      options[key] = function () {\n        return value;\n      };\n    }\n  }\n  /**\n   * HtmlEncodes the given value\n   */\n\n\n  var htmlEncodeContainer = $('<div />');\n\n  function htmlEncode(value) {\n    if (value) {\n      return htmlEncodeContainer.text(value).html();\n    } else {\n      return '';\n    }\n  }\n  /**\n   * Returns the position of the caret in the given input field\n   * http://flightschool.acylt.com/devnotes/caret-position-woes/\n   */\n\n\n  function doGetCaretPosition(oField) {\n    var iCaretPos = 0;\n\n    if (document.selection) {\n      oField.focus();\n      var oSel = document.selection.createRange();\n      oSel.moveStart('character', -oField.value.length);\n      iCaretPos = oSel.text.length;\n    } else if (oField.selectionStart || oField.selectionStart == '0') {\n      iCaretPos = oField.selectionStart;\n    }\n\n    return iCaretPos;\n  }\n  /**\n    * Returns boolean indicates whether user has pressed an expected key combination.\n    * @param object keyPressEvent: JavaScript event object, refer\n    *     http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html\n    * @param object lookupList: expected key combinations, as in:\n    *     [13, {which: 188, shiftKey: true}]\n    */\n\n\n  function keyCombinationInList(keyPressEvent, lookupList) {\n    var found = false;\n    $.each(lookupList, function (index, keyCombination) {\n      if (typeof keyCombination === 'number' && keyPressEvent.which === keyCombination) {\n        found = true;\n        return false;\n      }\n\n      if (keyPressEvent.which === keyCombination.which) {\n        var alt = !keyCombination.hasOwnProperty('altKey') || keyPressEvent.altKey === keyCombination.altKey,\n            shift = !keyCombination.hasOwnProperty('shiftKey') || keyPressEvent.shiftKey === keyCombination.shiftKey,\n            ctrl = !keyCombination.hasOwnProperty('ctrlKey') || keyPressEvent.ctrlKey === keyCombination.ctrlKey;\n\n        if (alt && shift && ctrl) {\n          found = true;\n          return false;\n        }\n      }\n    });\n    return found;\n  }\n  /**\n   * Initialize tagsinput behaviour on inputs and selects which have\n   * data-role=tagsinput\n   */\n\n\n  $(function () {\n    $(\"input[data-role=tagsinput], select[multiple][data-role=tagsinput]\").tagsinput();\n  });\n})(window.jQuery);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/components/manage/assets/js/tagsinput.js\n");

/***/ })

}]);